@model IEnumerable<WakeyWakey.Models.Task>

@{
    ViewData["Title"] = "My Tasks";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<head>
    <style>
        .hero {
            display: flex;
            flex-direction: column;
            align-items: start;
            margin-bottom: 20px;
        }

        .hero h1 {
            text-align: left;
            margin-bottom: 10px; /* Adjust space between title and button */
        }

        .btn.create {
            background-color: #0099cc;
            color: white;
            padding: 10px 20px;
            border-radius: 15px;
            text-decoration: none;
            transition: background-color 0.3s ease;
        }

        .btn.create:hover {
            background-color: #007198;
        }

        .tasks-container {
            background-color: #fff;
            border-radius: 20px;
            box-shadow: 1px 9px 14px 7px rgba(0,0,0,0.1);
            padding: 20px;
            margin-bottom: 20px;
        }

        .task {
            border-bottom: 2px solid #e4e4e4;
            padding: 10px;
            position: relative;
            transition: background-color 0.3s ease;
        }

        .task:last-child {
            border-bottom: none;
        }

        .task:hover {
            background-color: #f9f9f9;
        }

        .task-header {
            display: flex;
            align-items: center;
            cursor: pointer;
            justify-content: space-between;
        }

        .task-completed-checkbox {
            margin-right: 10px;
        }

        .task-name {
            font-weight: bold;
            flex-grow: 1;
        }

        .task-toggle {
            border: none;
            background: none;
            cursor: pointer;
            margin-left: 10px;
        }

        .subtasks {
            margin-top: 10px;
            display: none;
        }

        .task-details {
            margin-top: 5px;
            font-size: 0.9em;
            color: #666;
        }
    </style>
</head>

<body>
    <div class="hero">
        <div>
            <h1>@ViewData["Title"]</h1>
        </div>
        <div>
            <a href="@Url.Action("Create", "Task")" class="btn create">Create Task</a>
        </div>
    </div>

    @if (!Model.Any())
    {
        <p>No tasks available. Create a new task.</p>
    }
    else
    {
        <div class="tasks-container">
            @foreach (var task in Model.Where(t => t.ParentId == null))
            {
                @Html.Partial("_TaskItem", task) // Display each task
            }
        </div>
    }

@* <script> *@
@*     document.querySelectorAll('.task-toggle').forEach(button => { *@
@*         button.addEventListener('click', function() { *@
@*             const taskId = this.closest('.task').getAttribute('data-task-id'); *@
@*             const subtasks = document.querySelector(`.task[data-task-id="${taskId}"] .subtasks`); *@
@*             if (subtasks) { *@
@*                 subtasks.style.display = subtasks.style.display === 'none' ? 'block' : 'none'; *@
@*                 if (this.innerText === '-') { *@
@*                     this.innerText = '+'; *@
@*                 } else { *@
@*                     this.innerText = '-'; *@
@*                 } *@
@*             } *@
@*         }); *@
@*     }); *@
@* </script> *@

<script>
        document.querySelectorAll('.task-name').forEach(taskName => {
            taskName.addEventListener('click', function() {
                const taskElement = this.closest('.task');
                const subtasks = taskElement.querySelector('.subtasks');
                if (subtasks) {
                    subtasks.style.display = subtasks.style.display === 'none' ? 'block' : 'none';
                }
            });
        });
</script>


</body>